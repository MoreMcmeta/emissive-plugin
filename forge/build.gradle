plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.modrinth.minotaur" version "2.3.1"
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${project.forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "modVersion": project.version,
                "minecraftVersion": project.minecraft_version,
                "minMoreMcmetaVersion": project.moremcmeta_min_version,
                "loaderVersion": project.forge_version.split('-')[1].split('\\.')[0]
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = project.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

if (System.getenv("CURSEFORGE_TOKEN") != null) {
    curseforge {
        apiKey = System.getenv("CURSEFORGE_TOKEN")
        project {
            id = project.forge_curseforge_id
            releaseType = "release"
            addGameVersion "Forge"
            addGameVersion "Java $project.java_version"
            addGameVersion project.minecraft_version
            mainArtifact(remapJar.archiveFile) {
                displayName = "v$version"
            }
            changelog = System.getenv("CHANGELOG")
            changelogType = "markdown"
        }
    }
}

if (System.getenv("MODRINTH_TOKEN") != null) {
    modrinth {
        token = System.getenv("MODRINTH_TOKEN")
        projectId = project.modrinth_id
        changelog = System.getenv("CHANGELOG")
        versionNumber = "v$version-forge"
        versionType = "release"
        uploadFile = remapJar
        gameVersions = [project.minecraft_version]
        loaders = ["forge"]
    }
}
