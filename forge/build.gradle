plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.modrinth.minotaur" version "2.3.1"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "moremcmeta_emissive_plugin-common.mixins.json", "moremcmeta_emissive_plugin-forge.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${project.forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "modVersion": project.version,
                "minecraftVersion": project.minecraft_version,
                "minMoreMcmetaVersion": project.moremcmeta_min_version,
                "loaderVersion": project.forge_version.split('-')[1].split('\\.')[0]
    }

    def packRoot = "$projectDir/../common/src/main/resources/resourcepacks/z_fighting_fix"
    from("$packRoot/assets/minecraft") {
        into "assets/moremcmeta_emissive_plugin"
    }

    from(["$packRoot/pack.png", "$packRoot/pack.mcmeta"]) {
        into "assets/moremcmeta_emissive_plugin"
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude loom.accessWidenerPath.get().asFile.name
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set "forge"
}

jar {
    archiveClassifier.set "dev"
}

sourcesJar {
    afterEvaluate {
        [":common"].forEach {
            def depSources = project(it).sourcesJar
            dependsOn depSources
            from(depSources.archiveFile.map { zipTree(it) }) {
                exclude loom.accessWidenerPath.get().asFile.name
            }
        }
    }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

if (System.getenv("CURSEFORGE_TOKEN") != null) {
    curseforge {
        apiKey = System.getenv("CURSEFORGE_TOKEN")
        project {
            id = project.forge_curseforge_id
            releaseType = "release"
            addGameVersion "Forge"
            addGameVersion "Java $project.java_version"
            addGameVersion project.minecraft_version
            mainArtifact(remapJar.archiveFile) {
                displayName = "v$version"
                relations {
                    requiredDependency "moremcmeta"
                }
            }
            changelog = System.getenv("CHANGELOG")
            changelogType = "markdown"
        }
    }
}

if (System.getenv("MODRINTH_TOKEN") != null) {
    modrinth {
        token = System.getenv("MODRINTH_TOKEN")
        projectId = project.modrinth_id
        changelog = System.getenv("CHANGELOG")
        versionNumber = "v$version-forge"
        versionType = "release"
        uploadFile = remapJar
        gameVersions = [project.minecraft_version]
        loaders = ["forge"]
        dependencies {
            required.project "moremcmeta"
        }
    }
}
